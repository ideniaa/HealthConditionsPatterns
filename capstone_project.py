# -*- coding: utf-8 -*-
"""Capstone Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qVFgX1BzS62yNmqCda8wVAiHDTvWfzMJ
"""

# Name: Idenia Ayala
# Assignment: Capstone Project
# Course: CS 2410
# Date: 12/09/2024

# Import Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Load Data
df = pd.read_excel('/content/Patients Data ( Used for Heart Disease Prediction ).xlsx')

df.head()

# Check dimensions of dataset
df.shape

# Clean Data

# Remove irrelevant columns
df = df.drop(columns=['PatientID'])
df =  df.drop(columns=['HIVTesting'])
df = df.drop(columns=['ChestScan'])

# Removing ECigarette Usage to keep project simple
df = df.drop(columns=['ECigaretteUsage'])

# Check for null values
df.isnull().sum()

# Check for zero values
df.isin([0]).sum()

# Check data types
df.dtypes

# Function to convert 'Yes' to 1 and 'No' to 0
def convert_yes_no(value):
    if isinstance(value, str):
        if value.lower().startswith('yes'):
            return 1
        elif value.lower().startswith('no'):
            return 0
    return value

# Change Sex column to numeric type
df['Sex'] = df['Sex'].replace({'Male': 1, 'Female': 0})

# Change GeneralHealth column to numeric type
df['GeneralHealth'] = df['GeneralHealth'].replace({'Excellent': 5, 'Very good': 4, 'Good': 3, 'Fair': 2, 'Poor': 1})

# Apply the convert_yes_no function to Yes/No object columns
df['HadDiabetes'] = df['HadDiabetes'].apply(convert_yes_no)
df['TetanusLast10Tdap'] = df['TetanusLast10Tdap'].apply(convert_yes_no)

# Convert 'AgeCategory' to string type before applying string operations
#df['AgeCategory'] = df['AgeCategory'].astype(str)

# Extract numeric age from AgeCategory using regex and convert to numeric type
#df['AgeCategory'] = df['AgeCategory'].str.extract('(\d+)').astype(int)

# Group AgeCategory column by age
#df['AgeCategory'] = pd.cut(df['AgeCategory'], bins=[0, 18, 25, 40, 50, 60, 70, 80, np.inf])
#df['AgeCategory'] = pd.cut(df['AgeCategory'], bins=[0, 20, 30, 40, 50, 60, 70, 80, np.inf])

df.head()

# Boxplots for HeightInMeters, WeightInKilograms, and BMI
plt.figure(figsize=(15, 5))

plt.subplot(1, 3, 1)
sns.boxplot(y=df['HeightInMeters'])
plt.title('HeightInMeters Boxplot')

plt.subplot(1, 3, 2)
sns.boxplot(y=df['WeightInKilograms'])
plt.title('WeightInKilograms Boxplot')

plt.subplot(1, 3, 3)
sns.boxplot(y=df['BMI'])
plt.title('BMI Boxplot')

plt.tight_layout()
plt.show()

df.describe()

# Function to cap outliers
def cap_outliers(df, column):
    Q1 = df[column].quantile(0.25)
    Q3 = df[column].quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    df[column] = np.where(df[column] < lower_bound, lower_bound, df[column])
    df[column] = np.where(df[column] > upper_bound, upper_bound, df[column])
    return df

# Cap outliers for HeightInMeters, WeightInKilograms, and BMI
df = cap_outliers(df, 'HeightInMeters')
df = cap_outliers(df, 'WeightInKilograms')
df = cap_outliers(df, 'BMI')

# Boxplots for HeightInMeters, WeightInKilograms, and BMI after capping
plt.figure(figsize=(15, 5))

plt.subplot(1, 3, 1)
sns.boxplot(y=df['HeightInMeters'])
plt.title('HeightInMeters Boxplot')

plt.subplot(1, 3, 2)
sns.boxplot(y=df['WeightInKilograms'])
plt.title('WeightInKilograms Boxplot')

plt.subplot(1, 3, 3)
sns.boxplot(y=df['BMI'])
plt.title('BMI Boxplot')

plt.tight_layout()
plt.show()

df.describe()

# Define the list of conditions
conditions = ['HadHeartAttack', 'HadAngina', 'HadStroke', 'HadAsthma', 'HadSkinCancer',
              'HadCOPD', 'HadDepressiveDisorder', 'HadKidneyDisease', 'HadArthritis', 'HadDiabetes']

# Filter for Male and Female
male_counts = df[df['Sex'] == 1][conditions].sum()
female_counts = df[df['Sex'] == 0][conditions].sum()

# Create new set
condition_comparison = pd.DataFrame({'Male': male_counts, 'Female': female_counts})

# Create separate bars for male and female
condition_comparison.plot(kind='bar', figsize=(12, 6), color=['skyblue', 'lightcoral'])

# Display
plt.title('Comparison of Health Conditions between Male and Female Participants', fontsize=14)
plt.xlabel('Health Conditions', fontsize=12)
plt.ylabel('Count', fontsize=12)
plt.xticks(rotation=45, ha='right')
plt.legend(title='Sex')
plt.tight_layout()
plt.show()

# Group data by age category and count occurrences of each health condition
age_condition_counts = df.groupby('AgeCategory')[conditions].sum()

# Plot results
age_condition_counts.plot(kind='bar', figsize=(15, 8), stacked=True)
plt.title('Health Conditions by Age Group')
plt.xlabel('Age Category')
plt.ylabel('Number of Patients')
plt.xticks(rotation=45)
plt.legend(title='Health Conditions')
plt.tight_layout()
plt.show()

# Group data by state and count occurrences of each health condition
state_condition_counts = df.groupby('State')[conditions].sum()

# Plot results
state_condition_counts.plot(kind='bar', figsize=(15, 8), stacked=True)
plt.title('Health Conditions by State')
plt.xlabel('State')
plt.ylabel('Number of Patients')
plt.xticks(rotation=90)
plt.legend(title='Health Conditions')
plt.tight_layout()
plt.show()

# Calculate percentage of each condition for each race/ethnicity category
race_ethnicity_condition_percentages = df.groupby('RaceEthnicityCategory')[conditions].sum() / df.groupby('RaceEthnicityCategory')[conditions].count() * 100

# Round percentage to two decimal points
race_ethnicity_condition_percentages = race_ethnicity_condition_percentages.round(2)

# Display results
race_ethnicity_condition_percentages

# Calculate the percentage of former smokers and never smokers for each health condition
smoker_status_counts = df.groupby('SmokerStatus')[conditions].sum()
total_smoker_status_counts = df.groupby('SmokerStatus')[conditions].count()
smoker_status_percentages = (smoker_status_counts / total_smoker_status_counts) * 100

# Filter for 'Former Smoker' and 'Never Smoked'
filtered_percentages = smoker_status_percentages.loc[['Former smoker', 'Never smoked']]


# Transpose the set to have conditions as rows and 'Yes/No' as columns
filtered_percentages = filtered_percentages.T

# Plot
filtered_percentages.plot(kind='bar', figsize=(15, 8), stacked=False)
plt.title('Percentage of Health Conditions by Smoker Status (Former/Never)')
plt.xlabel('Health Condition')
plt.ylabel('Percentage')
plt.xticks(rotation=45)
plt.legend(title='Smoker Status')
plt.tight_layout()
plt.show()

# Create a new set for the percentage of alcohol drinkers with each condition
alcohol_condition_data = df.groupby('AlcoholDrinkers')[conditions].sum() / df.groupby('AlcoholDrinkers')[conditions].count() * 100

# Rename the index for the x-axis labels
alcohol_condition_data = alcohol_condition_data.rename(index={0: 'No', 1: 'Yes'})

# Transpose the set to have conditions as rows and 'Yes/No' as columns
alcohol_condition_data = alcohol_condition_data.T

# Plot
alcohol_condition_data.plot(kind='bar', figsize=(15, 8))
plt.title('Percentage of Alcohol Drinkers for each Health Condition')
plt.xlabel('Health Conditions')
plt.ylabel('Percentage')
plt.xticks(rotation=45)
plt.legend(title='Alcohol Drinkers')
plt.tight_layout()
plt.show()

# Create bins for BMI
bins = [0, 18.5, 24.9, 29.9, float('inf')]
labels = ['Underweight', 'Normal', 'Overweight', 'Obese']
df['BMI_Category'] = pd.cut(df['BMI'], bins=bins, labels=labels, right=False)

# Group data by BMI category and health conditions
bmi_condition_counts = df.groupby('BMI_Category')[conditions].sum()

# Plotting the line graph
plt.figure(figsize=(12, 6))
for condition in conditions:
    plt.plot(bmi_condition_counts.index, bmi_condition_counts[condition], label=condition)

plt.title('Health Conditions by BMI Category')
plt.xlabel('BMI Category')
plt.ylabel('Number of Patients')
plt.xticks(rotation=45)
plt.legend(title='Health Conditions')
plt.tight_layout()
plt.show()

# correlation for numeric types
numeric_columns = df.select_dtypes(include=['number']).columns
correlation_matrix = df[numeric_columns].corr()

# Create a heatmap of the correlation matrix
plt.figure(figsize=(30, 12))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.title("Correlation Heatmap of Numeric Features")
plt.show()

# Display the top correlations for numeric types
top_correlations = correlation_matrix.unstack().sort_values(ascending=False)
top_correlations = top_correlations[top_correlations != 1.0]
print(top_correlations.head(40))

# Get the correlations related to the conditions
conditions_correlations = correlation_matrix.loc[conditions, conditions]

# Exclude self-correlations
np.fill_diagonal(conditions_correlations.values, 0)

# Get the top 5 correlations
top_5_correlations = conditions_correlations.unstack().sort_values(ascending=False).head(10)

print("Top 5 correlations regarding conditions:")
top_5_correlations

# Filter the correlation matrix for conditions
conditions_correlations = correlation_matrix.loc[conditions, conditions]

# Create the heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(conditions_correlations, annot=True, cmap='coolwarm', fmt=".2f", linewidths=.5)
plt.title('Correlation Heatmap for Health Conditions')
plt.show()

# Remove additional categorical columns for ML Model
df = df.drop(columns=['State'])
df = df.drop(columns=['BMI_Category'])
df = df.drop(columns=['GeneralHealth'])
df = df.drop(columns=['CovidPos'])
dr = df.drop(columns=['HighRiskLastYear'])

# One-Hot Encoding using dummies
df = pd.get_dummies(df, columns=['RaceEthnicityCategory'], drop_first=False)

from sklearn.preprocessing import LabelEncoder

# Initialize a separate LabelEncoder for each feature
le_age = LabelEncoder()
le_smoker = LabelEncoder()
le_disease = LabelEncoder()

# Fit and transform 'SmokerStatus' column and store result in new column
df['smoking_status_encoded'] = le_smoker.fit_transform(df['SmokerStatus'])

# Drop original 'SmokerStatus' column
df.drop(columns=['SmokerStatus'], inplace=True)

# Apply Label Encoding to 'AgeCategory' column and store result in new column
df['age_encoded'] = le_age.fit_transform(df['AgeCategory'])

# Drop original 'AgeCategory' column
df.drop(columns=['AgeCategory'], inplace=True)

# Create the 'Diseases' column by combining disease columns
df['Diseases'] = df.apply(lambda row: ', '.join([col for col in ['HadHeartAttack', 'HadAngina', 'HadStroke', 'HadAsthma', 'HadSkinCancer', 'HadCOPD', 'HadDepressiveDisorder', 'HadKidneyDisease', 'HadArthritis', 'HadDiabetes'] if row[col] == 1]), axis=1)

# Apply the LabelEncoder to the 'Diseases' column
df['Diseases_encoded'] = le_disease.fit_transform(df['Diseases'])

# Save cleaned data to new cvs file
df.to_csv('cleaned_data.csv', index=False)